{"payload":{"allShortcutsEnabled":true,"fileTree":{"":{"items":[{"name":"minggu3","path":"minggu3","contentType":"directory"},{"name":"booleanModel.ipynb","path":"booleanModel.ipynb","contentType":"file"}],"totalCount":2}},"fileTreeProcessingTime":1.3092920000000001,"foldersToFetch":[],"reducedMotionEnabled":"system","repo":{"id":702838371,"defaultBranch":"main","name":"tugas-STKI-minggu-3","ownerLogin":"Imanueloz","currentUserCanPush":false,"isFork":false,"isEmpty":false,"createdAt":"2023-10-10T12:47:40.000+07:00","ownerAvatar":"https://avatars.githubusercontent.com/u/115988729?v=4","public":true,"private":false,"isOrgOwned":false},"symbolsExpanded":false,"treeExpanded":true,"refInfo":{"name":"main","listCacheKey":"v0:1696916879.0","canEdit":true,"refType":"branch","currentOid":"ee318969c61d3487ee6965ec37b34b0e883c7ec1"},"path":"booleanModel.ipynb","currentUser":{"id":147537459,"login":"yosephinelisaujana","userEmail":"yosephinelisa11@gmail.com"},"blob":{"rawLines":["{"," \"cells\": [","  {","   \"cell_type\": \"code\",","   \"execution_count\": 7,","   \"metadata\": {},","   \"outputs\": [","    {","     \"ename\": \"ModuleNotFoundError\",","     \"evalue\": \"No module named 'ntlk'\",","     \"output_type\": \"error\",","     \"traceback\": [","      \"\\u001b[1;31m---------------------------------------------------------------------------\\u001b[0m\",","      \"\\u001b[1;31mModuleNotFoundError\\u001b[0m                       Traceback (most recent call last)\",","      \"Cell \\u001b[1;32mIn[7], line 1\\u001b[0m\\n\\u001b[1;32m----> 1\\u001b[0m \\u001b[39mimport\\u001b[39;00m \\u001b[39mntlk\\u001b[39;00m\\n\\u001b[0;32m      2\\u001b[0m \\u001b[39mfrom\\u001b[39;00m \\u001b[39mntlk\\u001b[39;00m\\u001b[39m.\\u001b[39;00m\\u001b[39mcorpus\\u001b[39;00m \\u001b[39mimport\\u001b[39;00m stopwords\\n\\u001b[0;32m      3\\u001b[0m \\u001b[39mfrom\\u001b[39;00m \\u001b[39mntlk\\u001b[39;00m\\u001b[39m.\\u001b[39;00m\\u001b[39mstem\\u001b[39;00m \\u001b[39mimport\\u001b[39;00m WordNetLemmatizer, PorterStemmer\\n\",","      \"\\u001b[1;31mModuleNotFoundError\\u001b[0m: No module named 'ntlk'\"","     ]","    },","    {","     \"ename\": \"\",","     \"evalue\": \"\",","     \"output_type\": \"error\",","     \"traceback\": [","      \"\\u001b[1;31mThe Kernel crashed while executing code in the the current cell or a previous cell. Please review the code in the cell(s) to identify a possible cause of the failure. Click <a href='https://aka.ms/vscodeJupyterKernelCrash'>here</a> for more info. View Jupyter <a href='command:jupyter.viewOutput'>log</a> for further details.\"","     ]","    }","   ],","   \"source\": [","    \"import ntlk\\n\",","    \"from ntlk.corpus import stopwords\\n\",","    \"from ntlk.stem import WordNetLemmatizer, PorterStemmer\\n\",","    \"from ntlk.tokenize import sent_tokenize , word_tokenize\\n\",","    \"import glob\\n\",","    \"import re\\n\",","    \"import os\\n\",","    \"import numpy as np\\n\",","    \"import sys\\n\",","    \"Stopwords = set(stopwords('english'))\"","   ]","  },","  {","   \"cell_type\": \"code\",","   \"execution_count\": null,","   \"metadata\": {},","   \"outputs\": [],","   \"source\": [","    \"def finding_all_unique_words_and_freq(words):\\n\",","    \"    words_unique = []\\n\",","    \"    word_freq = {}\\n\",","    \"    for word in words:\\n\",","    \"        if word not in words_unique:\\n\",","    \"            words_unique.append(word)\\n\",","    \"    for word in words_unique:\\n\",","    \"        word_freq[word] = words.count(word)\\n\",","    \"    return word_freq\\n\",","    \"def finding_freq_of_word_in_doc(word,words):\\n\",","    \"    freq = words.count(word)\\n\",","    \"\\n\",","    \"def remove_spesial_characters(text):\\n\",","    \"    regex = re.compile('[^a-Za-Z0-9\\\\s]')\\n\",","    \"    text_returned = re.sub(regex, '', text)\\n\",","    \"    return text_returned        \"","   ]","  },","  {","   \"cell_type\": \"code\",","   \"execution_count\": null,","   \"metadata\": {},","   \"outputs\": [],","   \"source\": [","    \"all_words = []\\n\",","    \"dict_global = {}\\n\",","    \"file_folder = 'data/*'\\n\",","    \"idx = 1\\n\",","    \"files_with_index = {}\\n\",","    \"for file in glob.glob(file_folder):\\n\",","    \"    print(file)\\n\",","    \"    fname = file\\n\",","    \"    file = open(file , \\\"r\\\")\\n\",","    \"    text = file.read()\\n\",","    \"    text = remove_special_characters(text)\\n\",","    \"    text = re.sub(re.compile('\\\\d'), '', text)\\n\",","    \"    sentences = sent_tokenize(text)\\n\",","    \"    words = word_tokenize(text)\\n\",","    \"    words = [word for word in words if len(words)>1]\\n\",","    \"    words = [word.lower() for word in words]\\n\",","    \"    words = [word for word in words if word not in Stopwords]\\n\",","    \"    dict_global.update(finding_all_unique_words_and_freq(words))\\n\",","    \"    files_with_index[idx] = os.path.basename(fname)\\n\",","    \"    idx = idx + 1\\n\",","    \"\\n\",","    \"unique_words_all = set(dict_global.keys())    \"","   ]","  },","  {","   \"cell_type\": \"code\",","   \"execution_count\": null,","   \"metadata\": {},","   \"outputs\": [],","   \"source\": [","    \"class Node:\\n\",","    \"    def __init__(self, docId, freq = None):\\n\",","    \"        self.freq = freq\\n\",","    \"        self.doc = docId\\n\",","    \"        self.nextval = None\\n\",","    \"\\n\",","    \"class SlinkedList:\\n\",","    \"    def __init__(self, head = None):\\n\",","    \"        self.head = head       \"","   ]","  },","  {","   \"cell_type\": \"code\",","   \"execution_count\": null,","   \"metadata\": {},","   \"outputs\": [],","   \"source\": [","    \"linked_list_data = {}\\n\",","    \"for word in unique_words_all:\\n\",","    \"    linked_list_data[word] = SlinkedList()\\n\",","    \"    linked_list_data[word].head = Node(1,Node)\\n\",","    \"word_freq_in_doc = {}\\n\",","    \"idx = 1\\n\",","    \"for file in glob.glob(file_folder):\\n\",","    \"    file = open(file, \\\"r\\\")\\n\",","    \"    text = file.read()\\n\",","    \"    text = remove_spesial_characters(text)\\n\",","    \"    text = re.sub(re.compile('\\\\d'), '', text)\\n\",","    \"    sentences = sent_tokenize(text)\\n\",","    \"    words = word_tokenize(text)\\n\",","    \"    words = [word for word in words if len(words)>1]\\n\",","    \"    words = [word.lower() for word in words]\\n\",","    \"    words = [word for word in words if word not in Stopwords]\\n\",","    \"    word_freq_in_doc = finding_all_unique_words_and_freq(words)\\n\",","    \"    for word in word_freq_in_doc.keys():\\n\",","    \"        linked_list = linked_list_data[word].head\\n\",","    \"        while linked_list.nextval is not None:\\n\",","    \"            linked_list = linked_list.nextval\\n\",","    \"        linked_list.nextval = Node(idx, word_freq_in_doc[word])\\n\",","    \"    idx = idx + 1            \"","   ]","  },","  {","   \"cell_type\": \"code\",","   \"execution_count\": null,","   \"metadata\": {},","   \"outputs\": [","    {","     \"ename\": \"SyntaxError\",","     \"evalue\": \"invalid syntax (743181443.py, line 51)\",","     \"output_type\": \"error\",","     \"traceback\": [","      \"\\u001b[1;36m  Cell \\u001b[1;32mIn[1], line 51\\u001b[1;36m\\u001b[0m\\n\\u001b[1;33m    list zeroes_and_ones_of_all_words[0]\\u001b[0m\\n\\u001b[1;37m         ^\\u001b[0m\\n\\u001b[1;31mSyntaxError\\u001b[0m\\u001b[1;31m:\\u001b[0m invalid syntax\\n\"","     ]","    }","   ],","   \"source\": [","    \"query = input('Enter yout query: ')\\n\",","    \"query = word_tokenize(query)\\n\",","    \"connecting_words = []\\n\",","    \"cnt = 1\\n\",","    \"different_words = []\\n\",","    \"bitwise_op = []\\n\",","    \"for word in query:\\n\",","    \"    if word.lower() != \\\"and\\\" and word.lower() != \\\"or\\\" and word.lower() != \\\"not\\\":\\n\",","    \"        different_words.append(word.lower())\\n\",","    \"    else:\\n\",","    \"        connecting_words.append(word.lower())\\n\",","    \"print(connecting_words)\\n\",","    \"total_files = len(files_with_index)\\n\",","    \"zeroes_and_ones = []\\n\",","    \"zeroes_and_ones_of_all_words = []\\n\",","    \"for word in (different_words):\\n\",","    \"    if word.lower() in unique_words_all:\\n\",","    \"        zeroes_and_ones = [0] * total_files\\n\",","    \"        linkedlist = linked_list_data[word].head\\n\",","    \"        print(word)\\n\",","    \"        while linkedlist.nextval is not None:\\n\",","    \"            zeroes_and_ones[linkedlist.nextval.doc - 1] = 1\\n\",","    \"            linkedlist = linkedlist.nextval\\n\",","    \"        zeroes_and_ones_of_all_words.append(zeroes_and_ones)\\n\",","    \"    else:\\n\",","    \"        print(word, \\\" not found\\\")\\n\",","    \"        sys.exit()\\n\",","    \"print(zeroes_and_ones_of_all_words)\\n\",","    \"for word in connecting_words:\\n\",","    \"    word_list1 = zeroes_and_ones_of_all_words[0]\\n\",","    \"    word_list2 = zeroes_and_ones_of_all_words[1]\\n\",","    \"    if word == \\\"and\\\":\\n\",","    \"        bitwise_op = [w1 & w2 for (w1,w2) in zip(word_list1, word_list2)]\\n\",","    \"        zeroes_and_ones_of_all_words.remove(word_list1)\\n\",","    \"        zeroes_and_ones_of_all_words.remove(word_list2)\\n\",","    \"        zeroes_and_ones_of_all_words.insert(0,bitwise_op);\\n\",","    \"    elif word == \\\"or\\\":\\n\",","    \"        bitwise_op = [w1 | w2 for (w1,w2) in zip(word_list1, word_list2)]\\n\",","    \"        zeroes_and_ones_of_all_words.remove(word_list1)\\n\",","    \"        zeroes_and_ones_of_all_words.remove(word_list2)\\n\",","    \"        zeroes_and_ones_of_all_words.insert(0,bitwise_op);\\n\",","    \"    elif word == \\\"not\\\":\\n\",","    \"        bitwise_op = [not w1 for w1 in word_list2]\\n\",","    \"        bitwise_op = [int(b == True) for b in bitwise_op]\\n\",","    \"        zeroes_and_ones_of_all_words.remove(word_list2)\\n\",","    \"        zeroes_and_ones_of_all_words.remove(word_list1)\\n\",","    \"        bitwise_op = [w1 & w2 for (w1,w2) in zip(word_list1, bitwise_op)]\\n\",","    \"        zeroes_and_ones_of_all_words.insert(0,bitwise_op);\\n\",","    \"\\n\",","    \"files = []\\n\",","    \"lis = zeroes_and_ones_of_all_words[0]\\n\",","    \"cnt = 1\\n\",","    \"for index in lis:\\n\",","    \"    if index == 1:\\n\",","    \"        files.append(files_with_index[cnt])\\n\",","    \"    cnt = cnt+1\\n\",","    \"\\n\",","    \"print(files)    \"","   ]","  },","  {","   \"cell_type\": \"code\",","   \"execution_count\": null,","   \"metadata\": {},","   \"outputs\": [],","   \"source\": []","  }"," ],"," \"metadata\": {","  \"kernelspec\": {","   \"display_name\": \"Python 3\",","   \"language\": \"python\",","   \"name\": \"python3\"","  },","  \"language_info\": {","   \"codemirror_mode\": {","    \"name\": \"ipython\",","    \"version\": 3","   },","   \"file_extension\": \".py\",","   \"mimetype\": \"text/x-python\",","   \"name\": \"python\",","   \"nbconvert_exporter\": \"python\",","   \"pygments_lexer\": \"ipython3\",","   \"version\": \"3.11.0\"","  },","  \"orig_nbformat\": 4"," },"," \"nbformat\": 4,"," \"nbformat_minor\": 2","}"],"stylingDirectives":null,"csv":null,"csvError":null,"dependabotInfo":{"showConfigurationBanner":false,"configFilePath":null,"networkDependabotPath":"/Imanueloz/tugas-STKI-minggu-3/network/updates","dismissConfigurationNoticePath":"/settings/dismiss-notice/dependabot_configuration_notice","configurationNoticeDismissed":false,"repoAlertsPath":"/Imanueloz/tugas-STKI-minggu-3/security/dependabot","repoSecurityAndAnalysisPath":"/Imanueloz/tugas-STKI-minggu-3/settings/security_analysis","repoOwnerIsOrg":false,"currentUserCanAdminRepo":false},"displayName":"booleanModel.ipynb","displayUrl":"https://notebooks.githubusercontent.com/view/ipynb?browser=safari&bypass_fastly=true&color_mode=auto&commit=ee318969c61d3487ee6965ec37b34b0e883c7ec1&device=iphone&docs_host=https%3A%2F%2Fdocs.github.com&enc_url=68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f496d616e75656c6f7a2f74756761732d53544b492d6d696e6767752d332f656533313839363963363164333438376565363936356563333762333462306538383363376563312f626f6f6c65616e4d6f64656c2e6970796e62&logged_in=true&nwo=Imanueloz%2Ftugas-STKI-minggu-3&path=booleanModel.ipynb&platform=ios&repository_id=702838371&repository_type=Repository&version=16","headerInfo":{"blobSize":"8.89 KB","deleteInfo":{"deleteTooltip":"Fork this repository and delete the file"},"editInfo":{"editTooltip":"Fork this repository and edit the file"},"ghDesktopPath":"https://desktop.github.com","gitLfsPath":null,"onBranch":true,"shortPath":"162539c","siteNavLoginPath":"/login?return_to=https%3A%2F%2Fgithub.com%2FImanueloz%2Ftugas-STKI-minggu-3%2Fblob%2Fmain%2FbooleanModel.ipynb","isCSV":false,"isRichtext":false,"toc":null,"lineInfo":{"truncatedLoc":"248","truncatedSloc":"248"},"mode":"file"},"image":false,"isCodeownersFile":null,"isPlain":false,"isValidLegacyIssueTemplate":false,"issueTemplateHelpUrl":"https://docs.github.com/articles/about-issue-and-pull-request-templates","issueTemplate":null,"discussionTemplate":null,"language":"Jupyter Notebook","languageID":185,"large":false,"loggedIn":true,"newDiscussionPath":"/Imanueloz/tugas-STKI-minggu-3/discussions/new","newIssuePath":"/Imanueloz/tugas-STKI-minggu-3/issues/new","planSupportInfo":{"repoIsFork":null,"repoOwnedByCurrentUser":null,"requestFullPath":"/Imanueloz/tugas-STKI-minggu-3/blob/main/booleanModel.ipynb","showFreeOrgGatedFeatureMessage":null,"showPlanSupportBanner":null,"upgradeDataAttributes":null,"upgradePath":null},"publishBannersInfo":{"dismissActionNoticePath":"/settings/dismiss-notice/publish_action_from_dockerfile","dismissStackNoticePath":"/settings/dismiss-notice/publish_stack_from_file","releasePath":"/Imanueloz/tugas-STKI-minggu-3/releases/new?marketplace=true","showPublishActionBanner":false,"showPublishStackBanner":false},"rawBlobUrl":"https://github.com/Imanueloz/tugas-STKI-minggu-3/raw/main/booleanModel.ipynb","renderImageOrRaw":false,"richText":null,"renderedFileInfo":{"identityUUID":"d23ee9b4-97ea-4a86-95e3-d56f4347ea62","renderFileType":"ipynb","size":9104},"shortPath":null,"tabSize":8,"topBannersInfo":{"overridingGlobalFundingFile":false,"globalPreferredFundingPath":null,"repoOwner":"Imanueloz","repoName":"tugas-STKI-minggu-3","showInvalidCitationWarning":false,"citationHelpUrl":"https://docs.github.com/en/github/creating-cloning-and-archiving-repositories/creating-a-repository-on-github/about-citation-files","showDependabotConfigurationBanner":false,"actionsOnboardingTip":null},"truncated":false,"viewable":true,"workflowRedirectUrl":null,"symbols":{"timedOut":false,"notAnalyzed":true,"symbols":[]}},"copilotInfo":{"documentationUrl":"https://docs.github.com/copilot/overview-of-github-copilot/about-github-copilot-for-individuals","notices":{"codeViewPopover":{"dismissed":false,"dismissPath":"/settings/dismiss-notice/code_view_copilot_popover"}},"userAccess":{"accessAllowed":false,"hasSubscriptionEnded":false,"orgHasCFBAccess":false,"userHasCFIAccess":false,"userHasOrgs":false,"userIsOrgAdmin":false,"userIsOrgMember":false,"business":null,"featureRequestInfo":null}},"csrf_tokens":{"/Imanueloz/tugas-STKI-minggu-3/branches":{"post":"Pl2eGoScy3na2IzvYtDQb8MRcWb1PHgzU6UGihrBCz7dzYdQN96Am_2Ewpqp9dkdvk2pUjFIZJEUlVKvGBOCig"},"/repos/preferences":{"post":"lasQT2vgBOKOkSrz_CED7434zSoQDrqVZ6N4CDIPn7YAMKjCIFvfS5TknsEZVNlbGmn6bmHwwfekiklcRKEp6A"}}},"title":"tugas-STKI-minggu-3/booleanModel.ipynb at main · Imanueloz/tugas-STKI-minggu-3"}